{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","heroes","id","universe","name","cars","mark","model","keysArr","arrNames","useState","valueKey","setValueKey","valueArray","setValueArray","groupItem","setGroupItem","changeArray","useMemo","className","map","group","onChange","e","target","value","onClick","includes","alert","items","str","groupItems","forEach","item","push","groupBy","Object","keys","key","i","k","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4522de30.chunk.js","sourcesContent":["import './App.scss';\nimport React, {useMemo, useState} from \"react\";\n\n\nconst App = () => {\n\n    const heroes = [\n        {id: 1, universe: \"marvel\", name: \"Spider Man\"},\n        {id: 2, universe: \"marvel\", name: \"Iron Man\"},\n        {id: 3, universe: \"dc\", name: \"Aqua Man\"},\n        {id: 4, universe: \"dc\", name: \"Bat Man\"},\n        {id: 5, universe: \"marvel\", name: \"Hulk\"}\n    ]\n    const cars = [\n        {id: 1, mark: \"AUDI\", model: \"Rs\"},\n        {id: 2, mark: \"AUDI\", model: \"80\"},\n        {id: 3, mark: \"Skoda\", model: \"Octavia\"},\n        {id: 4, mark: \"Skoda\", model: \"Rapid\"},\n        {id: 5, mark: \"Opel\", model: \"Vectra\"},\n        {id: 6, mark: \"Opel\", model: \"Omega\"},\n    ]\n    const keysArr = ['id','universe','name','mark','model']\n    const arrNames = ['cars','heroes']\n\n    const [valueKey, setValueKey] = useState('')\n    const [valueArray, setValueArray] = useState('')\n    const [groupItem, setGroupItem] = useState(null)\n\n    const changeArray = useMemo(() => {\n        switch (valueArray) {\n            case \"cars\":\n                return cars\n            case \"heroes\":\n                return heroes\n        }\n    }, [valueArray])\n\n    const groupBy = (items, str) => {\n        const groupItems = {};\n        items.forEach((item) => {\n            if (item[str] in groupItems) {\n                return groupItems[item[str]].push(item);\n            }\n            groupItems[item[str]] = [item];\n        });\n        return groupItems;\n    };\n\n\n    const handleGroupItem = () => {\n            if(keysArr.includes(valueKey) && arrNames.includes(valueArray)){\n                const group = groupBy(changeArray, valueKey)\n                setGroupItem(group)\n            }else {\n                return alert('Проверьте правильность написания ключа или массива')\n            }\n\n    }\n\n\n    return (\n        <div className='wrapper'>\n            <div className='arrays'>\n                <div className='arrHero'>\n                <h2>heroes</h2>\n                {heroes.map(group => <div>id:{group.id} universe:{group.universe} name:{group.name}</div>)}\n                </div>\n                <div>\n                <h2>cars</h2>\n                {cars.map(group => <div>id:{group.id} mark:{group.mark} model:{group.model}</div>)}\n                </div>\n            </div>\n            <div>\n                 <span>Выбирите массив для группировки : <input\n                     onChange={e => setValueArray(e.target.value)}\n                 /></span>\n                <span>Введите ключ для группировки : <input\n                    onChange={e => setValueKey(e.target.value)}\n                /></span>\n                <button onClick={handleGroupItem}>Сгруппировать</button>\n            </div>\n            <div>\n                {groupItem && <div>\n                    {\n                        Object.keys(groupItem).map((key, i) => (\n                                <p key={i}>\n                                    <span>{key}: </span>\n                                    <span>{\"[\"} {groupItem[key].map(item => <span>{\"{\"}\n                                        {Object.keys(item).map((k) => <span>{k}: {item[k]},</span>)}\n                                        {\"},\"}</span>)} {\"]\"},\n                        </span>\n                                </p>\n                            )\n                        )\n                    }\n\n                </div>}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}